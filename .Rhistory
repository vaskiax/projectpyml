library(readr)
data <- read_csv("data.csv")
library(caret)
library(randomForest)
data$X23 <- NULL
data$ORIGIN_AIRPORT_SEQ_ID <- NULL
data$DEP_AIRPORT_SEQ_ID <- NULL
data$DEST_AIRPORT_SEQ_ID <- NULL
airports <-c ('ATL','LAX','ORD','DWF','JFK','SFO','CLT','LAS','PHX')
data <- subset(data, DEST %in% airports & ORIGIN %in% airports)
onTimeData <- data[!is.na(data$DEP_DEL15) & data$DEP_DEL15!="" & !is.na(data$ARR_DEL15) & data$ARR_DEL15!="",]
rm(data)
onTimeData$ARR_DEL15 <- as.factor(onTimeData$ARR_DEL15)
onTimeData$DEP_DEL15 <- as.factor(onTimeData$DEP_DEL15)
onTimeData$DEST <- as.factor(onTimeData$DEST)
onTimeData$ORIGIN <- as.factor(onTimeData$ORIGIN)
onTimeData$ORIGIN_AIRPORT_ID <- as.factor(onTimeData$ORIGIN_AIRPORT_ID)
onTimeData$DEST_AIRPORT_ID <- as.factor(onTimeData$DEST_AIRPORT_ID)
onTimeData$DAY_OF_WEEK <- as.factor(onTimeData$DAY_OF_WEEK)
onTimeData$DEP_TIME_BLK <- as.factor(onTimeData$DEP_TIME_BLK)
onTimeData$OP_UNIQUE_CARRIER <- as.factor(onTimeData$OP_UNIQUE_CARRIER)
tapply(onTimeData$ARR_DEL15, onTimeData$ARR_DEL15, length)
set.seed(122515)
featureCols <- c("ARR_DEL15", "DAY_OF_WEEK", "CARRIER", "DEST","ORIGIN","DEP_TIME_BLK")
splitData <- createDataPartition(onTimeData$ARR_DEL15, p=0.70, list = FALSE)
rm(splitData)
onTimeDataFiltered <- onTimeData[,featureCols]
rm(featureCols)
featureCols <- c("ARR_DEL15", "DAY_OF_WEEK", "OP_UNIQUE_CARRIER", "DEST","ORIGIN","DEP_TIME_BLK")
onTimeDatafiltered <- onTimeData[,featureCols]
trainingDataset <- createDataPartition(onTimeDatafiltered$ARR_DEL15, p=0.70, list = FALSE)
rm(onTimeData)
trainingData <- onTimeDatafiltered[,trainingDataset]
trainingData <- onTimeDatafiltered[trainingDataset,]
testingData <- onTimeDatafiltered[-trainingDataset,]
rm(trainingDataset)
LogRegModel <- train(ARR_DEL15 ~ ., data = trainingData, method = "glm", family = "binomial")
ModelPrediction <- predict(LogRegModel, testingData)
ConfuMatrix <- confusionMatrix(ModelPrediction, testingData$ARR_DEL15)
DeciTree <- randomForest(trainingData[-1], trainingData$ARR_DEL15, proximity = TRUE, importance = TRUE)
savehistory("~/Documentos/Universidad/programing/ML-TRAINING/projectpyml/n.Rhistory")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel')
install.packages("devtools")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
